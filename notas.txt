*crear: (usuarios)
    usuarios permitidos en el inicio de sesion ->
        src\utils\validate.js
    tokens de autenticacion y asociar usuarios con token (asignar: rol | introduction | avatar(revisar como cargar imagen desde local) | name) ->
        mock\user.js
    adicionar roles de usuario para renderizarlos en la vista --> src\views\permission\role.vue ->
        mock\role\index.js
    rutas de vistas y/o permitir asociar vistas a los roles de usuario ->
        src\router\index.js
    
    request.js

*cambiar | modificar:
    logo -> 
        src/layout/components/sidebar/Logo.vue
    texto logo -> 
        src/layout/components/sidebar/Logo.vue
    opciones panel lateral derecho ->
        src/settings.js
    tablero inicial (dashboard) roles ->
        src\views\dashboard\editor\index.vue
    login ->
        src\views\login\index.vue
    opciones menu desplegable de usuario (perfil, imagen de usuario, salir) | opcines de busqueda y ampliar a pantalla completa ->
        src\layout\components\Navbar.vue
    visualizacion de dashboard principal segun el rol que inicia sesi칩n) ->
        src\views\dashboard\index.vue
    el texto del 'menu desplegable' de las pesta침as abiertas recientemente
        src\layout\components\TagsView\index.vue
    internacionalizaci칩n agregar un diccionario al correspondiente script (Teniendo en cuenta el identificador del diccionario):
        src\lang\es.js <- espa침ol
        src\lang\en.js <- ingles
    el texto de la raiz del menu (rutas)
        src\components\Breadcrumb\index.vue
    
*asociar:
    rutas de vistas a un nombre especifico que permita redireccionar facil a una vista ->
        /mock/role/route.js
    que rol puede ver todas las vistas
        src\store\modules\permission.js
    
-> COMANDOS PARA UTILIZAR EL EDITOR (VI) DE LINUX - ES COMO UN BLOC DE NOTAS
*. vi vue.config.js <- COMANDO PARA ABRIR EL ARCHIVO CON EL EDITOR
*. COMANDO PARA SALIR DEL EDITOR -> :q
*. OPRIMIR (TECLA I) PARA INSERTAR TEXTO EN EL ARCHIVO
*. COMANDO PARA GUARDAR CAMBIOS REALIZADOS CON EL EDITOR -> :W (ESTO LUEGO DE OPRIMIR LAS TACLAS CTRL + C PARA SALIR DE LOS CAMBIOS QUE SE HICIERON)
PAGINA DE DOCUMENTACION -> https://docs.bluehosting.cl/tutoriales/servidores/guia-practica-de-los-editores-de-texto-nano-y-vi-en-linux.html

---------------------------------------------------------------------------
-- COMANDOS PARA CREAR UN SERVICIO EN LINUX - Levantar servidor de nodejs (ANGULAR)
---------------------------------------------------------------------------
1. Entrar al directorio:
	cd /lib/systemd/system/

2. Crear el script del servicio
	sudo nano tarifarito.service

3. Escribir en el script lo siguiente:
	[Unit]
    Description=Iniciar servidor de Tarifarito
    After=network.target
    StartLimitIntervalSec=0

    [Service]
    WorkingDirectory=/home/admincc/jherreraa/tarifarito/
    Type=simple
    Restart=always
    RestartSec=1
    User=root
    ExecStart=/bin/bash server.sh start

    [Install]
    WantedBy=multi-user.target

4. Comando para que el servicio se inicie con el sistema
	sudo systemctl enable tarifarito

5. Comando para iniciar nuestro servicio
	sudo systemctl start tarifarito

6. Comando para detener el servicio
	sudo systemctl stop tarifarito

7. Comando para recargar servicios luego de pararlos y/o modificarlos (Opcional)
	sudo systemctl daemon-reload

8. Comando para saber si el servicio esta habilitado
	sudo systemctl is-enabled tarifarito

9. Comando para saber si el servicio esta activo
	sudo systemctl is-active tarifarito

10. Comando para reiniciar un servicio
	sudo systemctl restart tarifarito

11. Comando para saber estado del servicio (Muestra la consola de node)
	sudo systemctl status tarifarito

*. Comando para listar todos los servicios que estan corriendo
	sudo systemctl list-unit-files --type service --all

*. COMANDO PARA VER QUE APLICACIONES ESTAN CORRIENDO POR LOS PUERTOS DE LINUX
	netstat -tanp

*. COMANDO PARA MATAR UN PROCESO QUE CORRE POR UN PUERTO DETERMINADO - LINUX
	sudo fuser -k 9527/tcp